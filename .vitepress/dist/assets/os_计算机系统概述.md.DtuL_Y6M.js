import{_ as l,c as t,o as i,a3 as e}from"./chunks/framework.D61v7-2O.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"os/计算机系统概述.md","filePath":"os/计算机系统概述.md"}'),a={name:"os/计算机系统概述.md"},p=e('<h2 id="操作系统的基础概念" tabindex="-1">操作系统的基础概念 <a class="header-anchor" href="#操作系统的基础概念" aria-label="Permalink to &quot;操作系统的基础概念&quot;">​</a></h2><p>操作系统是一组能有效地组织和管理计算机硬件和软件资源，合理的对各类作业进行调度，以及方便用户使用的程序的集合。</p><p>操作系统目标：</p><ul><li>方便性</li><li>有效性</li><li>可扩充性</li><li>开放性</li></ul><p>操作系统的作用：</p><ul><li>OS作为用户与计算机硬件系统之间的接口</li><li>OS作为计算机系统资源的管理者</li><li>OS实现了对计算机资源的抽象</li></ul><p>操作系统的特征：</p><p>（1）并发性</p><ul><li>并发性：指两个或多个事件在同一时间间隔内发生</li><li>并行性：指两个或多个时间在同一时刻发生</li></ul><p>（2）共享性：指系统中的资源可供内存中多个并发执行的进程共同使用</p><p>两种资源共享方式</p><ul><li>互斥共享方式：要求一个资源一段时间内只满足一个请求，只供一个作业使用的资源</li><li>同时共享方式：用于允许在一段时间内由多个进程同时（宏观上看）对它进行访问的资源。</li></ul><p>（3）虚拟性：指通过某种技术把一个物理实体变成若干个逻辑上的对应物</p><p>虚拟实现技术：</p><ul><li>时分复用技术：通过利用处理机的空闲时间运行其他程序提高处理机的利用率</li><li>空分复用技术：通过利用存储器的空闲空间分区域存放和运行多道程序，提高内存的利用率</li></ul><p>（4）异步性：在多道程序环境下，当多个进程并发执行时，由于资源等因素的限制，进程的执行通常以“走走停停”的方式运行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>并发和共享是操作系统的两个最基本的特征，它们又是互为存在条件。</p></div><p>操作系统的功能</p><p>（1）处理机管理功能</p><ul><li>主要任务：对处理机进行分配，并对其运行进行有效的控制和管理。</li><li>主要功能：进程控制、进程同步、进程通信、进程调度</li></ul><p>（2）存储器管理功能</p><ul><li>主要任务：为多道程序的运行提供良好的环境，方便用户使用存储器，提高其利用率，能从逻辑上来扩充内存。</li><li>主要功能：内存分配、内存保护、地址映射、内存扩充</li></ul><p>（3）设备管理功能</p><ul><li>主要任务：完成用户提出的I/O请求，为用户分配I/O设备；提高CPU和I/O设备的利用率；提高I/O速度；方便用户使用I/O设备。</li><li>主要功能：缓冲管理、设备分配、设备处理（驱动）、虚拟设备</li></ul><p>（4）文件管理功能</p><ul><li>主要任务：对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。</li><li>主要功能：存储空间的管理、目录管理、文件的读写管理、文件的共享与保护（存取控制 ）</li></ul><p>（5）用户接口</p><ul><li>命令接口 <ul><li>联机用户接口</li><li>脱机用户接口</li></ul></li><li>程序接口</li><li>图形接口</li></ul><h2 id="操作系统的发展历程" tabindex="-1">操作系统的发展历程 <a class="header-anchor" href="#操作系统的发展历程" aria-label="Permalink to &quot;操作系统的发展历程&quot;">​</a></h2><ol><li><p>未配置操作系统的计算机系统</p></li><li><p>单道批处理系统（Simple Batch Processing System）：系统对作业的处理都是成批地进行的、且在内存中始终只保持一道作业</p></li></ol><p>（1）概念：引入脱机输入输出技术，并用监督程序（操作系统的雏形）负责控制作业的输入和输出。</p><p>（2）主要特征</p><ul><li>自动性：一批作业能自动地逐个依次运行，而无须人工干预。</li><li>顺序性：磁带上的各道作业顺序地进入内存，且顺序完成。</li><li>单道性：内存中仅有一道程序运行，仅当该程序完成或发生异常情况时，才调入其后继程序进入内存运行。</li></ul><p>（3）优点：缓解人及速度矛盾，提升资源利用率。</p><p>（4）缺点：内存中只能有一道程序运行，CPU有大量时间是在空闲等待I/O完成，利用率依然较低</p><ol start="3"><li>多道批处理系统</li></ol><p>（1）概念：将一个以上的作业存放在主存中，并且同时处于运行状态，这些作业共享处理器、外设以及其他资源。</p><p>（2）主要特征</p><ul><li>制约性：程序执行因为共享资源及相互协同的原因产生了竞争，相互制约。</li><li>间断性：考虑竞争的公平性，程序的执行是断续的。</li><li>共享性：内存中的多个程序共享系统中的各种软硬件资源。</li></ul><p>（3）优点</p><ul><li>资源利用率高</li><li>系统吞吐量大</li></ul><p>（4）缺点</p><ul><li>平均周转时间长</li><li>无交互能力</li></ul><ol start="4"><li>分时系统</li></ol><p>（1）概念：以时间片为单位轮流为每个用户/作业服务，用户可与计算机进行交互。</p><p>（2）特点</p><ul><li>多路性：多个用户同时使用一台计算机，共享CPU和其他资源，充分利用系统资源。</li><li>独立性：用户感觉不到计算机为其他人服务，各用户独立操作，互不干扰。</li><li>及时性：通过时间片技术和轮转调度算法保证及时响应。</li><li>交互性：系统及时响应用户的请求，显著提高调试和修改程序的效率，缩短了周转时间。</li></ul><p>（3）优点：提供人机交互能力。</p><p>（4）缺点：不能优先处理紧急任务。</p><ol start="5"><li>实时系统</li></ol><p>（1）概念：</p><p>（2）分类</p><ul><li>按任务执行时是否呈现周期性来划分 <ul><li>周期性实时任务：要求按指定的周期循环执行，以便周期性地控制某个外部事件。</li><li>非周期性实时任务：任务的执行无明显的周期性，但都联系着一个截止时间（开始截止时间、完成截止时间）。</li></ul></li><li>根据对截止时间的要求来划分 <ul><li>硬实时任务：有严格的截止时间要求，若错过可能出现难以预测的结果。</li><li>软实时任务：对截止时间要求不严格，若错过对系统产生的影响不太大。</li></ul></li></ul><p>（3）优点：能够响应、优先处理紧急任务，某些紧急任务不需时间片排队。</p><p>常见的三种操作系统对比：</p><table><thead><tr><th style="text-align:center;">系统</th><th style="text-align:center;">多路性</th><th style="text-align:center;">及时性</th><th style="text-align:center;">交互性</th><th style="text-align:center;">可靠性</th></tr></thead><tbody><tr><td style="text-align:center;">批处理系统</td><td style="text-align:center;">无</td><td style="text-align:center;">无</td><td style="text-align:center;">差（天）</td><td style="text-align:center;">差</td></tr><tr><td style="text-align:center;">分时系统</td><td style="text-align:center;">多终端服务</td><td style="text-align:center;">有</td><td style="text-align:center;">好（分,秒）</td><td style="text-align:center;">好</td></tr><tr><td style="text-align:center;">实时系统</td><td style="text-align:center;">多路采集、多路控制</td><td style="text-align:center;">有</td><td style="text-align:center;">最好（毫秒,微秒）</td><td style="text-align:center;">一般</td></tr></tbody></table><h2 id="操作系统的运行环境" tabindex="-1">操作系统的运行环境 <a class="header-anchor" href="#操作系统的运行环境" aria-label="Permalink to &quot;操作系统的运行环境&quot;">​</a></h2><h3 id="cpu运行模式" tabindex="-1">CPU运行模式 <a class="header-anchor" href="#cpu运行模式" aria-label="Permalink to &quot;CPU运行模式&quot;">​</a></h3><h3 id="中断和异常的处理" tabindex="-1">中断和异常的处理 <a class="header-anchor" href="#中断和异常的处理" aria-label="Permalink to &quot;中断和异常的处理&quot;">​</a></h3><h3 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to &quot;系统调用&quot;">​</a></h3><h2 id="操作系统的结构" tabindex="-1">操作系统的结构 <a class="header-anchor" href="#操作系统的结构" aria-label="Permalink to &quot;操作系统的结构&quot;">​</a></h2>',61),r=[p];function n(d,s,o,c,u,h){return i(),t("div",null,r)}const y=l(a,[["render",n]]);export{x as __pageData,y as default};
