import{_ as t,c as e,o as l,a3 as i}from"./chunks/framework.D61v7-2O.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"os/计算机系统概述.md","filePath":"os/计算机系统概述.md"}'),a={name:"os/计算机系统概述.md"},n=i('<h2 id="操作系统的基础概念" tabindex="-1">操作系统的基础概念 <a class="header-anchor" href="#操作系统的基础概念" aria-label="Permalink to &quot;操作系统的基础概念&quot;">​</a></h2><p>操作系统是一组能有效地组织和管理计算机硬件和软件资源，合理的对各类作业进行调度，以及方便用户使用的程序的集合。</p><p>操作系统目标：</p><ul><li>方便性</li><li>有效性</li><li>可扩充性</li><li>开放性</li></ul><p>操作系统的作用：</p><ul><li>OS作为用户与计算机硬件系统之间的接口</li><li>OS作为计算机系统资源的管理者</li><li>OS实现了对计算机资源的抽象</li></ul><p>操作系统的特征：</p><p>（1）并发性</p><ul><li>并发性：指两个或多个事件在同一时间间隔内发生</li><li>并行性：指两个或多个时间在同一时刻发生</li></ul><p>（2）共享性：指系统中的资源可供内存中多个并发执行的进程共同使用</p><p>两种资源共享方式</p><ul><li>互斥共享方式：要求一个资源一段时间内只满足一个请求，只供一个作业使用的资源</li><li>同时共享方式：用于允许在一段时间内由多个进程同时（宏观上看）对它进行访问的资源。</li></ul><p>（3）虚拟性：指通过某种技术把一个物理实体变成若干个逻辑上的对应物</p><p>虚拟实现技术：</p><ul><li>时分复用技术：通过利用处理机的空闲时间运行其他程序提高处理机的利用率</li><li>空分复用技术：通过利用存储器的空闲空间分区域存放和运行多道程序，提高内存的利用率</li></ul><p>（4）异步性：在多道程序环境下，当多个进程并发执行时，由于资源等因素的限制，进程的执行通常以“走走停停”的方式运行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>并发和共享是操作系统的两个最基本的特征，它们又是互为存在条件。</p></div><p>操作系统的功能</p><p>（1）处理机管理功能</p><ul><li>主要任务：对处理机进行分配，并对其运行进行有效的控制和管理。</li><li>主要功能：进程控制、进程同步、进程通信、进程调度</li></ul><p>（2）存储器管理功能</p><ul><li>主要任务：为多道程序的运行提供良好的环境，方便用户使用存储器，提高其利用率，能从逻辑上来扩充内存。</li><li>主要功能：内存分配、内存保护、地址映射、内存扩充</li></ul><p>（3）设备管理功能</p><ul><li>主要任务：完成用户提出的I/O请求，为用户分配I/O设备；提高CPU和I/O设备的利用率；提高I/O速度；方便用户使用I/O设备。</li><li>主要功能：缓冲管理、设备分配、设备处理（驱动）、虚拟设备</li></ul><p>（4）文件管理功能</p><ul><li>主要任务：对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。</li><li>主要功能：存储空间的管理、目录管理、文件的读写管理、文件的共享与保护（存取控制 ）</li></ul><p>（5）用户接口</p><ul><li>命令接口 <ul><li>联机用户接口</li><li>脱机用户接口</li></ul></li><li>程序接口</li><li>图形接口</li></ul><h2 id="操作系统的发展历程" tabindex="-1">操作系统的发展历程 <a class="header-anchor" href="#操作系统的发展历程" aria-label="Permalink to &quot;操作系统的发展历程&quot;">​</a></h2><ol><li><p>未配置操作系统的计算机系统</p></li><li><p>单道批处理系统（Simple Batch Processing System）：系统对作业的处理都是成批地进行的、且在内存中始终只保持一道作业</p></li></ol><p>（1）概念：引入脱机输入输出技术，并用监督程序（操作系统的雏形）负责控制作业的输入和输出。</p><p>（2）主要特征</p><ul><li>自动性：一批作业能自动地逐个依次运行，而无须人工干预。</li><li>顺序性：磁带上的各道作业顺序地进入内存，且顺序完成。</li><li>单道性：内存中仅有一道程序运行，仅当该程序完成或发生异常情况时，才调入其后继程序进入内存运行。</li></ul><p>（3）优点：缓解人及速度矛盾，提升资源利用率。</p><p>（4）缺点：内存中只能有一道程序运行，CPU有大量时间是在空闲等待I/O完成，利用率依然较低</p><ol start="3"><li>多道批处理系统</li></ol><p>（1）概念：将一个以上的作业存放在主存中，并且同时处于运行状态，这些作业共享处理器、外设以及其他资源。</p><p>（2）主要特征</p><ul><li>制约性：程序执行因为共享资源及相互协同的原因产生了竞争，相互制约。</li><li>间断性：考虑竞争的公平性，程序的执行是断续的。</li><li>共享性：内存中的多个程序共享系统中的各种软硬件资源。</li></ul><p>（3）优点</p><ul><li>资源利用率高</li><li>系统吞吐量大</li></ul><p>（4）缺点</p><ul><li>平均周转时间长</li><li>无交互能力</li></ul><ol start="4"><li>分时系统</li></ol><p>（1）概念：以时间片为单位轮流为每个用户/作业服务，用户可与计算机进行交互。</p><p>（2）特点</p><ul><li>多路性：多个用户同时使用一台计算机，共享CPU和其他资源，充分利用系统资源。</li><li>独立性：用户感觉不到计算机为其他人服务，各用户独立操作，互不干扰。</li><li>及时性：通过时间片技术和轮转调度算法保证及时响应。</li><li>交互性：系统及时响应用户的请求，显著提高调试和修改程序的效率，缩短了周转时间。</li></ul><p>（3）优点：提供人机交互能力。</p><p>（4）缺点：不能优先处理紧急任务。</p><ol start="5"><li>实时系统</li></ol><p>（1）概念：</p><p>（2）分类</p><ul><li>按任务执行时是否呈现周期性来划分 <ul><li>周期性实时任务：要求按指定的周期循环执行，以便周期性地控制某个外部事件。</li><li>非周期性实时任务：任务的执行无明显的周期性，但都联系着一个截止时间（开始截止时间、完成截止时间）。</li></ul></li><li>根据对截止时间的要求来划分 <ul><li>硬实时任务：有严格的截止时间要求，若错过可能出现难以预测的结果。</li><li>软实时任务：对截止时间要求不严格，若错过对系统产生的影响不太大。</li></ul></li></ul><p>（3）优点：能够响应、优先处理紧急任务，某些紧急任务不需时间片排队。</p><p><strong>常见的三种操作系统对比</strong>：</p><table><thead><tr><th style="text-align:center;">系统</th><th style="text-align:center;">多路性</th><th style="text-align:center;">及时性</th><th style="text-align:center;">交互性</th><th style="text-align:center;">可靠性</th></tr></thead><tbody><tr><td style="text-align:center;">批处理系统</td><td style="text-align:center;">无</td><td style="text-align:center;">无</td><td style="text-align:center;">差（天）</td><td style="text-align:center;">差</td></tr><tr><td style="text-align:center;">分时系统</td><td style="text-align:center;">多终端服务</td><td style="text-align:center;">有</td><td style="text-align:center;">好（分,秒）</td><td style="text-align:center;">好</td></tr><tr><td style="text-align:center;">实时系统</td><td style="text-align:center;">多路采集、多路控制</td><td style="text-align:center;">有</td><td style="text-align:center;">最好（毫秒,微秒）</td><td style="text-align:center;">一般</td></tr></tbody></table><h2 id="操作系统的运行环境" tabindex="-1">操作系统的运行环境 <a class="header-anchor" href="#操作系统的运行环境" aria-label="Permalink to &quot;操作系统的运行环境&quot;">​</a></h2><h3 id="cpu运行模式" tabindex="-1">CPU运行模式 <a class="header-anchor" href="#cpu运行模式" aria-label="Permalink to &quot;CPU运行模式&quot;">​</a></h3><p>两种程序：</p><ul><li>内核程序</li><li>应用程序</li></ul><p>两种指令：</p><ul><li>特权指令：指不允许用户直接使用的指令</li><li>非特权指令：允许用户直接使用的指令，不能直接访问系统中的软硬件资源，只限于访问用户的地址空间</li></ul><p>两种处理器状态：</p><ul><li>核心态（管态）：只能在核心态运行的指令和程序</li><li>用户态（目态）：在用户态运行的指令和程序</li></ul><p>两种状态的切换：</p><ul><li>核心态--&gt;用户态：发生在中断返回用户程序时，需要一条修改PSW(程序状态字)的特权命令</li><li>用户态--&gt;核心态：发生在中断时，通过硬件完成</li></ul><h3 id="中断和异常的处理" tabindex="-1">中断和异常的处理 <a class="header-anchor" href="#中断和异常的处理" aria-label="Permalink to &quot;中断和异常的处理&quot;">​</a></h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">异常（内中断）</th><th style="text-align:center;">中断（外中断）</th></tr></thead><tbody><tr><td style="text-align:center;">基本概念</td><td style="text-align:center;">由CPU内部产生的意外事件</td><td style="text-align:center;">由来自CPU外部的设备发出的中断请求(常用于输入输出)</td></tr><tr><td style="text-align:center;">分类</td><td style="text-align:center;">故障，自陷，终止</td><td style="text-align:center;">可屏蔽中断，不可屏蔽中断</td></tr><tr><td style="text-align:center;">执行时间</td><td style="text-align:center;">CPU在执行指令时会检查是否有异常发生</td><td style="text-align:center;">每个指令周期末尾，CPU都会检查是否有外中断信号需要处理</td></tr><tr><td style="text-align:center;">不同点</td><td style="text-align:center;">缺页”或“溢出”等异常事件是由特定指令在执行过程中产生的异常的检测由CPU自身完成，不必通过外部的某个信号通知CPU</td><td style="text-align:center;">中断不与任何指令相关联，也不阻止任何指令的完成</td></tr></tbody></table><h3 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to &quot;系统调用&quot;">​</a></h3><p>系统调用是指操作系统对应用程序和程序员提供的接口，系统调用需要触发Trap（陷入/访管指令）</p><p>系统调用与库函数的区别：</p><table><thead><tr><th style="text-align:center;">系统调用</th><th style="text-align:center;">库函数</th></tr></thead><tbody><tr><td style="text-align:center;">是操作系统的一部分，是内核为用户提供的程序接口，运行在内核空间</td><td style="text-align:center;">是语言或应用程序的一部分，可以运行在用户空间中</td></tr><tr><td style="text-align:center;">未使用系统调用的库函数，执行效率通常比系统调用的</td><td style="text-align:center;">许多库函数都会使用系统调用来实现功能，有的库函数没有使用系统调用</td></tr></tbody></table><p>系统调用的过程：</p><p>①传参</p><p>②陷入指令/Trap/访管【执行系统调用，发生在用户态</p><p>③由操作系统内核程序处理系统调用请求，发生在内核态</p><p>④返回应用程序</p><h2 id="操作系统的结构" tabindex="-1">操作系统的结构 <a class="header-anchor" href="#操作系统的结构" aria-label="Permalink to &quot;操作系统的结构&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">特性</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;">分层结构</td><td style="text-align:center;">内核分多层，每层可单向调用更低一层提供的接口</td><td style="text-align:center;">便于调试和验证，自底向上逐层调试验证；易扩充和易维护，各层之间调用接口清晰固定</td><td style="text-align:center;">仅可调用相邻低层，难以合理定义各层的边界</td></tr><tr><td style="text-align:center;">模块化</td><td style="text-align:center;">将内核划分为多个模块，各模块之间相互协作</td><td style="text-align:center;">模块间逻辑清晰易于维护，确定模块间接口后即可多模块同时开发；支持动态加载新的内核模块(如:安装设备驱动程序、安装新的文件系统模块到内核)，增强OS适应性；任何模块都可以直接调用其他模块，无需采用消息传递进行通信，效率高</td><td style="text-align:center;">模块间的接口定义未必合理、实用；模块间相互依赖，更难调试和验证</td></tr><tr><td style="text-align:center;">宏内核（大内核）</td><td style="text-align:center;">所有的系统功能都放在内核里(大内核结构的OS通常也采用了&quot;模块化“的设计思想)</td><td style="text-align:center;">性能高，内核内部各种功能都可以直接相互调用</td><td style="text-align:center;">内核庞大功能复杂，难以维护；大内核中某个功能模块出错，就可能导致整个系统崩溃</td></tr><tr><td style="text-align:center;">微内核</td><td style="text-align:center;">只把中断、原语、进程通信等最核心的功能放入内核。进程管理、文件管理、设备管理等功能以用户进程的形式运行在用户态</td><td style="text-align:center;">内核小功能少、易于维护，内核可靠性高；内核外的某个功能模块出错不会导致整个系统崩溃</td><td style="text-align:center;">性能低，需要频繁的切换 用户态/核心态。用户态下的各功能模块不可以直接相互调用，只能通过内核的&quot;消息传递&quot;来间接通信；用户态下的各功能模块不可以直接相互调用,只能通过内核的&quot;消息传递&quot;来间接通信</td></tr><tr><td style="text-align:center;">外核</td><td style="text-align:center;">内核负责进程调度、进程通信等功能，外核负责为用户进程分配未经抽象的硬件资源，且由外核负责保证资源使用安全</td><td style="text-align:center;">外核可直接给用户进程分配“不虚拟、不抽象”的硬件资源，使用户进程可以更灵活的使用硬件资源；减少了虚拟硬件资源的“映射层”，提升效率</td><td style="text-align:center;">降低了系统的一致性；使系统变得更复杂</td></tr></tbody></table><h2 id="操作系统引导" tabindex="-1">操作系统引导 <a class="header-anchor" href="#操作系统引导" aria-label="Permalink to &quot;操作系统引导&quot;">​</a></h2><p>引导过程：</p><p>①CPU从一个特定主存地址开始，取指令，执行ROM中的引导程序(先进行硬件自检，再开机)</p><p>②将磁盘的第一块——主引导记录 读入内存，执行磁盘引导程序，扫描分区表</p><p>③从活动分区(又称主分区，即安装了操作系统的分区)读入分区引导记录，执行其中的程序</p><p>④从根目录下找到完整的操作系统初始化程序(即启动管理器)并执行，完成“开机”的一系列动作</p><h2 id="虚拟机" tabindex="-1">虚拟机 <a class="header-anchor" href="#虚拟机" aria-label="Permalink to &quot;虚拟机&quot;">​</a></h2><p>使用虚拟化技术，将一台物理机器虚化成多台虚拟机器VM，每个虚拟机器都可用独立运行一个操作系统。</p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">第一类VMM</th><th style="text-align:center;">第二类VMM</th></tr></thead><tbody><tr><td style="text-align:center;">对物理资源的控制权</td><td style="text-align:center;">直接运行在硬件之上，能直接控制和分配物理资源</td><td style="text-align:center;">运行在Host OS之上，依赖于Host OS为其分配物理资源</td></tr><tr><td style="text-align:center;">资源分配方式</td><td style="text-align:center;">多在安装GuestOS时，VMM要在原本的硬盘上自行分配存储空间，类似于&quot;外核&quot;的分配方式，分配未经抽象的物理硬件</td><td style="text-align:center;">GuestOS 拥有自己的虚拟磁盘，该盘实际上是Host OS 文件系统中的一个大文件。GuestOS分配到的内存是虚拟内存</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">性能更好</td><td style="text-align:center;">性能更差，需要HostOS作为“中介&quot;</td></tr><tr><td style="text-align:center;">可支持的虚拟机数量</td><td style="text-align:center;">更多，不需要和 Host OS 竞争资源，相同的硬件资源可以支持更多的虚拟机</td><td style="text-align:center;">更少，Host OS 本身需要使用物理资源，HostOS 上运行的其他进程也需要物理资源</td></tr><tr><td style="text-align:center;">虚拟机的可迁移性</td><td style="text-align:center;">更差</td><td style="text-align:center;">更好，只需导出虚拟机镜像文件即可迁移到另一台 HostOS 上，商业化应用更广泛</td></tr><tr><td style="text-align:center;">运行模式</td><td style="text-align:center;">第一类VMM运行在最高特权级(Ring0)，可以执行最高特权的指令。</td><td style="text-align:center;">第二类VMM部分运行在用户态、部分运行在内核态。GuestOS 发出的系统调用会被 VMM 截获,并转化为 VMM 对 HostOS 的系统调用</td></tr></tbody></table>',88),r=[n];function d(s,c,p,o,x,y){return l(),e("div",null,r)}const u=t(a,[["render",d]]);export{g as __pageData,u as default};
