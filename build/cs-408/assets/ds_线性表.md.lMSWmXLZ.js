import{_ as e,c as i,o as l,a3 as t}from"./chunks/framework.D61v7-2O.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ds/线性表.md","filePath":"ds/线性表.md"}'),a={name:"ds/线性表.md"},o=t('<h2 id="线性表的基本概念" tabindex="-1">线性表的基本概念 <a class="header-anchor" href="#线性表的基本概念" aria-label="Permalink to &quot;线性表的基本概念&quot;">​</a></h2><p>特点：</p><ul><li>元素个数有限</li><li>逻辑上顺序</li><li>数据类型相同</li></ul><p>存储结构：</p><ul><li>顺序表：连续空间</li><li>链表</li></ul><div class="warning custom-block"><p class="custom-block-title">⚠</p><p>线性表本身是逻辑上顺序的数据结构，顺序表和链表表示的是线性表的存储结构。</p></div><p>线性表的基本操作：</p><ul><li><code>InitList(&amp;L)</code>：初始化表。构造一个空的线性表。</li><li><code>Length(L)</code>：求表长。返回线性表 L 的长度，即 L 中数据元素的个数。</li><li><code>LocateElem(L,e)</code>：按值查找。在表L中查找具有给定关键字 e 的元素</li><li><code>GetElem(L,i)</code>：按位查找。获取表 L 中第 i 个位置的元素的值。</li><li><code>ListInsert(&amp;L,i,e)</code>：插入。在表 L 中第 i 个位置上插入指定元素 e 。</li><li><code>ListDelete(&amp;L,i,e)</code>：删除。删除表 L 第 i 个位置的元素，并用 e 返回删除元素的值。</li><li><code>PrintList(L)</code>：输出。按先后顺序输出线性表 L 的所有元素值。</li><li><code>Empty(L)</code>：判空。判断线性表 L 是否为空，若为空返回 true ，反之则返回 false。</li><li><code>DestroyList(&amp;L)</code>：销毁。销毁线性表 L ，并释放所占内存空间。</li></ul><h2 id="线性表的实现" tabindex="-1">线性表的实现 <a class="header-anchor" href="#线性表的实现" aria-label="Permalink to &quot;线性表的实现&quot;">​</a></h2><h2 id="线性表的应用" tabindex="-1">线性表的应用 <a class="header-anchor" href="#线性表的应用" aria-label="Permalink to &quot;线性表的应用&quot;">​</a></h2>',10),c=[o];function d(s,r,n,_,p,L){return l(),i("div",null,c)}const u=e(a,[["render",d]]);export{m as __pageData,u as default};
